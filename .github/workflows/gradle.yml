name: Java CI with Gradle

on: [ push, pull_request ]

env:
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx8g -Dorg.gradle.daemon=false"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'
      - name: Set MAVEN_HOME
        run: echo "MAVEN_HOME=$(mvn --version | grep 'Maven home:' | cut -d ":" -f 2 | cut -c 2-)" >> $GITHUB_ENV
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Check code
        run: ./gradlew check jacocoTestReport
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/reports/jacoco/test/jacocoTestReport.xml
          flags: LINUX
          fail_ci_if_error: true
      - name: Codacy Coverage Reporter
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}

  validate:
    name: Validate on ${{ matrix.os }} and Java ${{ matrix.java }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        java:
          - 17
          - 18
          - 19
          - 20
          - 21
          - 22
        os:
          - 'ubuntu-latest'
          - 'macos-latest'
          - 'windows-latest'
    steps:
      - uses: actions/checkout@v5
      - name: Set up Java ${{ matrix.java }}
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          cache: 'gradle'
      - if: ${{ matrix.os == 'windows-latest' }}
        name: Set MAVEN_HOME (Windows)
        run: |
          mvn --version |
          select-string 'Maven home: (.+)$' |
          % { 'MAVEN_HOME=' + $_.Matches.Groups[1].Value } |
          Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - if: ${{ matrix.os != 'windows-latest' }}
        name: Set MAVEN_HOME
        run: echo "MAVEN_HOME=$(mvn --version | grep 'Maven home:' | cut -d ":" -f 2 | cut -c 2-)" >> $GITHUB_ENV
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Prepare test environment
        run: gradle clean prepareTestEnvironment --no-build-cache
      - name: Run plugin tests
        run: gradle :functionalTest --tests "com.github.dkorotych.gradle.maven.exec.MavenExecPluginFunctionalTest"
