plugins {
    id('com.github.dkorotych.gradle-maven-exec')
}

println "Validate work with Gradle: ${gradle.gradleVersion}"

tasks.register("realUseCaseTest") {
    group = "verification"
    dependsOn = ["checkMavenApplication", "checkMavenApplication2", "checkMavenApplication3"]
}
def replaceTargetSource = JavaVersion.current().isCompatibleWith(JavaVersion.toVersion("20"))
def replaceTargetSourceInPom(File applicationDir) {
    def file = file("${applicationDir}/pom.xml")
    def content = file.text
    content = content.
            replaceFirst("\\Q<maven.compiler.source>1.7</maven.compiler.source>\\E", "<maven.compiler.source>1.8</maven.compiler.source>").
            replaceFirst("\\Q<maven.compiler.target>1.7</maven.compiler.target>\\E", "<maven.compiler.target>1.8</maven.compiler.target>")
    file.text = content
}

def groupId = 'com.mycompany.app'
def artifactId = 'my-app'

task generateMavenApplication(type: MavenExec) {
    buildDir.mkdirs()
    ext.outputDir = mkdir("$buildDir/$artifactId")
    delete outputDir
    workingDir buildDir
    goals 'archetype:generate'
    options {
        define = [
                'groupId'            : groupId,
                'artifactId'         : artifactId,
                'archetypeArtifactId': 'maven-archetype-quickstart',
                'archetypeVersion'   : '1.4',
                'interactiveMode'    : 'false'
        ]
    }
}

task packageMavenApplication(type: MavenExec, dependsOn: 'generateMavenApplication') {
    outputs.dir mkdir("${generateMavenApplication.outputDir}/target")
    workingDir generateMavenApplication.outputDir
    goals 'package'
}

if (replaceTargetSource) {
    task replaceTargetSourceInPom() {
        doLast {
            replaceTargetSourceInPom(generateMavenApplication.outputDir)
        }
    }

    packageMavenApplication.dependsOn << replaceTargetSourceInPom
}

task checkMavenApplication(type: JavaExec, dependsOn: 'packageMavenApplication') {
    def outputFile = file("$buildDir/output.txt")
    workingDir generateMavenApplication.outputDir
    classpath file("${generateMavenApplication.outputDir}/target/${artifactId}-1.0-SNAPSHOT.jar")
    if (gradle.gradleVersion > '7.1') {
        mainClass = "${groupId}.App"
    } else {
        main "${groupId}.App"
    }
    standardOutput new FileOutputStream(outputFile)
    doLast {
        assert outputFile.text.trim() == 'Hello World!'
    }
}

task checkMavenApplication2 {
    doLast {
        buildDir.mkdirs()
        def application = artifactId + '-second'
        def applicationDir = file("$buildDir/$application")
        delete applicationDir
        def outputFile = file("$buildDir/output.txt")
        mavenexec {
            workingDir buildDir
            goals 'archetype:generate'
            define([
                    'groupId'            : groupId,
                    'artifactId'         : application,
                    'archetypeArtifactId': 'maven-archetype-quickstart',
                    'archetypeVersion'   : '1.4',
                    'interactiveMode'    : 'false'
            ])
            quiet true
        }
        if (replaceTargetSource) {
            replaceTargetSourceInPom(applicationDir)
        }
        mavenexec {
            workingDir applicationDir
            goals 'package'
            threads '2C'
            quiet true
        }
        javaexec {
            workingDir applicationDir
            classpath file("$applicationDir/target/$application-1.0-SNAPSHOT.jar")
            if (gradle.gradleVersion > '7.1') {
                mainClass = "${groupId}.App"
            } else {
                main "${groupId}.App"
            }
            standardOutput new FileOutputStream(outputFile)
        }
        assert outputFile.text.trim() == 'Hello World!'
    }
}

task checkMavenApplication3 {
    doLast {
        buildDir.mkdirs()
        def application = artifactId + '-third'
        def applicationDir = file("$buildDir/$application")
        delete applicationDir
        mavenexec {
            workingDir buildDir
            goals 'archetype:generate'
            define([
                    'groupId'            : groupId,
                    'artifactId'         : application,
                    'archetypeArtifactId': 'maven-archetype-j2ee-simple',
                    'archetypeVersion'   : '1.4',
                    'interactiveMode'    : 'false'
            ])
            quiet true
        }
        if (replaceTargetSource) {
            replaceTargetSourceInPom(applicationDir)
        }
        def file = file("${applicationDir}/pom.xml")
        def content = file.text
        content = content.
                replaceAll("2.20.1", "2.22.0").
                replaceAll("2.10.1", "3.0.1")
        file.text = content
        mavenexec {
            workingDir applicationDir
            goals 'package'
            threads '1C'
            quiet true
        }
    }
}