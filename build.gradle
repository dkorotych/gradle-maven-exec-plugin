/*
 * Copyright 2016 Dmitry Korotych.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import com.github.dkorotych.gradle.maven.exec.test.MavenTestHelperPlugin

plugins {
    id 'java-gradle-plugin'
    id 'idea'
    id 'com.gradle.plugin-publish' version '1.0.0'
    id 'net.researchgate.release' version '2.7.0'
    id "com.github.hierynomus.license" version "0.14.0"
    id 'ru.vyarus.quality' version '4.8.0'
    id 'ru.vyarus.github-info' version '1.3.0'
    id 'org.openrewrite.rewrite' version '5.24.0'
}

apply plugin: MavenTestHelperPlugin

group 'com.github.dkorotych.gradle.maven.exec'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testImplementation 'com.google.code.bean-matchers:bean-matchers:0.14'
    testImplementation 'com.google.guava:guava:31.1-jre'

    rewrite("org.openrewrite:rewrite-gradle:7.26.0")
    rewrite("org.openrewrite.recipe:rewrite-testing-frameworks:1.24.0")
    rewrite("org.openrewrite.recipe:rewrite-logging-frameworks:1.9.0")
    rewrite("org.openrewrite.recipe:rewrite-migrate-java:1.8.0")
}

gradlePlugin {
    plugins {
        'gradle-maven-exec-plugin' {
            id = "com.github.dkorotych.gradle.maven.exec"
            implementationClass = 'com.github.dkorotych.gradle.maven.exec.MavenExecPlugin'
            displayName = 'Gradle Maven Exec Plugin'
        }
    }
}

java {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    dependsOn(tasks.prepareTestEnvironments)
    useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    useJUnitPlatform()
}

license {
    header project.file('config/license-header.txt')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.developers = 'Dmitry Korotych'
    skipExistingHeaders true
    strictCheck true
    exclude "**/fixtures/**"
}

github {
    user 'dkorotych'
    license 'Apache'
}

pluginBundle {
    website = github.site
    vcsUrl = github.vcsUrl
    description = 'Gradle plugin which provides an Maven exec task'
    tags = ['maven', 'exec', 'cross-platform']
}

javadoc {
    options {
        links("https://docs.oracle.com/javase/${JavaVersion.toVersion(project.sourceCompatibility).majorVersion}/docs/api/",
                "https://docs.gradle.org/${gradle.gradleVersion}/javadoc/",
                "http://docs.groovy-lang.org/${GroovySystem.version}/html/gapi/")
    }
}

idea {
    project {
        jdkName = sourceCompatibility
        module {
            downloadJavadoc = false
            downloadSources = true
        }
    }
}

cleanIdea.doLast {
    delete file('.idea')
}

updateVersion.doFirst {
    def file = file('README.md')
    def content = file.text
    def versionPattern = /\d+(?:\.\d+)+/
    content = content.replaceAll("id \"com.github.dkorotych.gradle-maven-exec\" version \"${versionPattern}\"",
            "id \"com.github.dkorotych.gradle-maven-exec\" version \"${version}\"")
    content = content.replaceAll("gradle-maven-exec-plugin:${versionPattern}",
            "gradle-maven-exec-plugin:${version}")
    file.text = content
}

rewrite {
    configFile = project.getRootProject().file("config/rewrite.yml")
    activeRecipe("com.github.dkorotych.gradle.maven.exec.MavenExecPlugin")
    exclusion("**/*.gradle")
}

//task generateMetricsPart {
//    def readmeFile = file('README.md')
//    def content = readmeFile.text
//    def header = '## Metrics'
//    def lastSpacesPattern = /\s+$/
//    def model = [
//            'header': header,
//            'template': 'FLAT',
//            'key': "${rootProject.group}:${rootProject.name}",
//            'metric': [
//                    'coverage',
//                    'bugs',
//                    'complexity',
//                    'code_smells',
//                    'vulnerabilities',
//                    'tests',
//                    'test_success_density',
//                    'violations',
//                    'ncloc',
//                    'lines'
//            ]
//    ]
//    def templateText = '''
//$header
//[![SonarQube Quality Gate](https://sonarqube.com/api/badges/gate?key=$key&template=$template)](https://sonarqube.com/dashboard?id=$key)
//<%
//metric.each {
//out.println("[![SonarQube ${it.capitalize().replaceAll('_', ' ')}](https://sonarqube.com/api/badges/measure?metric=${it}&key=$key&template=$template)](https://sonarqube.com/component_measures/metric/${it}/list?id=$key)")
//}
//%>
//'''.replaceAll(lastSpacesPattern, '')
//    def template = new SimpleTemplateEngine().createTemplate(templateText)
//    Writable metrics = template.make(model)
//    def metricsIndex = content.indexOf(header)
//    if (metricsIndex > 0) {
//        content = content.take(metricsIndex).replaceAll(lastSpacesPattern, '')
//    }
//    content += metrics
//    readmeFile.text = content
//}

task additionalUseCaseTest(type: GradleBuild) {
    dependsOn 'install'
    group = 'verification'
    buildFile = file('useCase.gradle')
    tasks = ['checkMavenApplication3']
}

task realUseCaseTest(type: GradleBuild) {
    dependsOn 'install'
    group = 'verification'
    buildFile = file('useCase.gradle')
    def useCaseTasks = ['checkMavenApplication', 'checkMavenApplication2']
    useCaseTasks.addAll(additionalUseCaseTest.tasks)
    tasks = useCaseTasks
}

task kotlinUseCaseTest(type: GradleBuild) {
    dependsOn 'install'
    group = 'verification'
    buildFile = file('useCase.gradle.kts')
    tasks = ['checkMavenApplication', 'checkMavenApplication2', 'checkMavenApplication3']
}
