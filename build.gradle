/*
 * Copyright 2016 Dmitry Korotych.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import com.github.dkorotych.gradle.maven.exec.test.MavenTestHelperPlugin
import org.gradle.util.GradleVersion

plugins {
    id "com.gradle.plugin-publish" version "1.2.1"
    id 'idea'
    id 'jacoco'
    id 'net.researchgate.release' version '2.8.1'
    id "com.github.hierynomus.license" version "0.15.0"
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'ru.vyarus.quality' version '4.9.0'
    id 'ru.vyarus.github-info' version '1.5.0'
    id 'org.openrewrite.rewrite' version '6.11.2'
    id "org.sonarqube" version "4.0.0.2929"
}

apply plugin: MavenTestHelperPlugin

group = 'io.github.dkorotych.gradle-maven-exec'
description = 'Gradle Maven Exec Plugin'

def versionPattern = /\d+(?:\.\d+)+/

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation 'com.google.code.bean-matchers:bean-matchers:0.14'
    testImplementation 'com.google.guava:guava:32.0.0-jre'

    rewrite(platform("org.openrewrite.recipe:rewrite-recipe-bom:1.19.4"))
    rewrite("org.openrewrite:rewrite-gradle")
    rewrite("org.openrewrite.recipe:rewrite-github-actions")
    rewrite("org.openrewrite.recipe:rewrite-testing-frameworks")
    rewrite("org.openrewrite.recipe:rewrite-logging-frameworks")
    rewrite("org.openrewrite.recipe:rewrite-migrate-java")
}

github {
    user 'dkorotych'
    license 'Apache'
}

gradlePlugin {
    plugins {
        MavenExecPlugin {
            id = "com.github.dkorotych.gradle-maven-exec"
            implementationClass = 'com.github.dkorotych.gradle.maven.exec.MavenExecPlugin'
            displayName = project.description
            description = 'Gradle plugin which provides an Maven exec task'
            if ((GradleVersion.current() <=> GradleVersion.version('8.0')) >= 0) {
                tags.set(['maven', 'exec', 'cross-platform'])
            }
        }
    }
}

if ((GradleVersion.current() <=> GradleVersion.version('8.0')) < 1) {
    pluginBundle {
        description = 'Gradle plugin which provides an Maven exec task'
        tags = ['maven', 'exec', 'cross-platform']
    }
}

java {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    dependsOn(tasks.prepareTestEnvironments)
    useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    useJUnitPlatform()
}

gradleEnterprise {
    buildScan {
        termsOfServiceUrl = "https://gradle.com/terms-of-service"
        termsOfServiceAgree = "yes"
        if (System.getenv("CI")) {
            tag "GitHub"
            tag project.version
            publishAlways()
            uploadInBackground = false
            link "VCS", github.vcsUrl + "/tree/${System.getenv('GITHUB_REF_NAME')}"
        } else {
            tag "local"
        }
        tag System.getProperty("os.name")
    }
}

license {
    header project.file('gradle/config/license-header.txt')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.developers = 'Dmitry Korotych'
    skipExistingHeaders true
    strictCheck true
    exclude "**/fixtures/**"
}

javadoc {
    options {
        links("https://docs.oracle.com/javase/${JavaVersion.toVersion(project.sourceCompatibility).majorVersion}/docs/api/",
                "https://docs.gradle.org/${gradle.gradleVersion}/javadoc/",
                "https://docs.groovy-lang.org/${GroovySystem.version}/html/gapi/")
    }
}

idea {
    project {
        jdkName = sourceCompatibility
        module {
            downloadJavadoc = false
            downloadSources = true
        }
    }
}

cleanIdea.doLast {
    delete file('.idea')
}

jacocoTestReport {
    reports {
        if ((GradleVersion.current() <=> GradleVersion.version('8.0')) < 1) {
            xml.enabled true
        } else {
            xml.required = true
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "${github.user}_${rootProject.name}"
        property "sonar.organization", github.user
        property "sonar.host.url", "https://sonarcloud.io"
        properties["sonar.test"] += 'buildSrc/src/main/java'
        properties["sonar.test"] += sourceSets.functionalTest.allSource.srcDirs
        properties["sonar.java.binaries"] += sourceSets.functionalTest.runtimeClasspath
    }
}

wrapper.gradleVersion = '6.0.1'

release {
    git {
        requireBranch = "master"
    }
}
afterReleaseBuild {
    dependsOn = [publishPlugins]
    doLast {
        logger.warn "RELEASED $project.group:$project.name:$project.version"
    }
}

dependencyUpdates {
    checkForGradleUpdate = false
    revision = "release"
    resolutionStrategy {
        componentSelection {
            all { ComponentSelection selection ->
                def candidate = selection.candidate
                if (candidate.version.matches('.+-M\\d+$')) {
                    selection.reject("Dependency ${candidate.displayName} reject because is a milestone release")
                }
                if (candidate.version.matches('.+-RC\\d+$')) {
                    selection.reject("Dependency ${candidate.displayName} reject because is a release candidate")
                }
                if (candidate.group == 'com.github.hierynomus.license'
                        && candidate.version >= '0.16.0') {
                    selection.reject("Plugin ${candidate.group} from version ${candidate.version} uses Gradle 7.0")
                }
                if (candidate.group == 'ru.vyarus.quality' && candidate.module == 'ru.vyarus.quality.gradle.plugin'
                        && candidate.version >= '5.0.0') {
                    selection.reject("Plugin ${candidate.group}:${candidate.module} from version ${candidate.version} uses Gradle 7.0")
                }
                if (candidate.group == 'ru.vyarus.github-info' && candidate.module == 'ru.vyarus.github-info.gradle.plugin'
                        && candidate.version >= '2.0.0') {
                    selection.reject("Plugin ${candidate.group}:${candidate.module} from version ${candidate.version} uses Gradle 7.0")
                }
                if (candidate.group == 'net.researchgate.release'
                        && candidate.version >= '3.0') {
                    selection.reject("Plugin ${candidate.group} from version ${candidate.version} uses Gradle 6.9")
                }
                if (candidate.group == 'com.github.ben-manes.versions'
                        && candidate.version >= '0.43.0') {
                    selection.reject("Plugin ${candidate.group} from version ${candidate.version} has java.lang.NoClassDefFoundError: groovy/xml/XmlSlurper")
                }
                if (candidate.group == 'org.mockito' && candidate.module == 'mockito-core'
                        && candidate.version >= '5.0') {
                    selection.reject("Mockito from 5.0 supported the Java 11 as minimum version")
                }
                if (candidate.group == 'com.google.guava' && candidate.module == 'guava') {
                    def index = candidate.version.indexOf("-jre")
                    if (index > 0) {
                        def guavaVersion = candidate.version.substring(0, index)
                        if (guavaVersion > '32.0.0') {
                            selection.reject("Skip this Guava version")
                        }
                    } else {
                        selection.reject("Support only JRE version of Guava")
                    }
                }
                if (candidate.group == 'org.openrewrite.rewrite'
                        && candidate.module == 'org.openrewrite.rewrite.gradle.plugin'
                        && candidate.version >= '6.0.0') {
                    selection.reject("Plugin ${candidate.group}:${candidate.module} from version ${candidate.version} uses Gradle 7.0")
                }
                if (candidate.group == 'org.openrewrite.recipe' && candidate.module == 'rewrite-recipe-bom'
                        && candidate.version >= '2.0.0') {
                    selection.reject("Dependency ${candidate.group}:${candidate.module} from version ${candidate.version} uses Java 11")
                }
                if (candidate.group == 'org.sonarqube' && candidate.module == 'org.sonarqube.gradle.plugin'
                        && candidate.version >= '4.1.0') {
                    selection.reject("Plugin ${candidate.group}:${candidate.module} from version ${candidate.version} drop Java 8 support")
                }
            }
        }
    }
}

updateVersion.doFirst {
    def file = file('README.md')
    def content = file.text
    content = content.replaceAll("id \"com.github.dkorotych.gradle-maven-exec\" version \"${versionPattern}\"",
            "id \"com.github.dkorotych.gradle-maven-exec\" version \"${version}\"")
    content = content.replaceAll("${rootProject.name}:${versionPattern}",
            "${rootProject.name}:${version}")
    file.text = content
}

rewrite {
    configFile = project.getRootProject().file("gradle/config/rewrite.yml")
    activeRecipe("com.github.dkorotych.gradle.maven.exec.MavenExecPlugin")
    exclusion("**/*.gradle")
}
